import { useState, useEffect } from "react";
import MeetupList from "../components/meetups/MeetupList";

const DUMMY_MEETUPS = [
  {
    id: "m1",
    title: "A first Meetup",
    image:
      "https://www.traveller.com.au/content/dam/images/g/o/3/6/k/o/image.related.articleLeadwide.620x349.go36hx.png/1460702656253.jpg",
    address: "Nepal,Pokhara",
    description: "This is a first meetup",
  },
  {
    id: "m2",
    title: "A Second Meetup",
    image:
      "https://www.traveller.com.au/content/dam/images/g/o/3/6/k/o/image.related.articleLeadwide.620x349.go36hx.png/1460702656253.jpg",
    address: "Nepal,Pokhara",
    description: "This is a Second meetup",
  },
];

function HomePage() {
  const [loadedMeetups, setloadedMeetups] = useState([]);
  // SIMULATING THE BACKEND FETCHING
  useEffect(() => {
    // send a http request and fetch data
    setloadedMeetups(DUMMY_MEETUPS);
  }, []);

  /*
    We dont see any difference while loading , since the data is available right from start and not fetching data actually from server.
    But technically there is a difference , because it is important to note that useEffect works such that it executes this function
    after the component function was executed . So that means that the first time this homepage component is rendered loaded 
    meetups will be an empty array. 
    Then the effect function will execute , it will then update the state and then the component function will execute again
    because the state changed and it will then re-render the list with the actual data.
    But we'll have two component render cycles . and in the first render cycle , the first time component renders , loadedMeetups state
    will be empty array .
    Because of this two render cycle we have a proble with search engine optimization (SEO). If you view a page source , you will notice
    that in there , the actual meetup data is missing .
    So the item we see in the screen are missing in the HTML element.
    And they are missing in HTML dom because the component in the screen only load in the seconf component execution cycle.
    But the prerendered HTML page generated by the NEXTJS automatically doesnot wait for the second cycle.


    */

  return <MeetupList meetups={loadedMeetups} />;
}

export default HomePage;
